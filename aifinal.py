# -*- coding: utf-8 -*-
"""AIFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j1Gb-qN20eKqxBk1r5_uGFp_BDZTJKUj
"""

#Import necessary modules 
import seaborn as sns
import pandas as pd
import math
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.tree import DecisionTreeRegressor

#Load the data set for gas prices
train = pd.read_csv('gasprices1.csv', header = None, na_values=['NaN'])
print("Finished loading the data files...")

#Add column to the dataset
train.columns =['Date', 'Boston', 'Chicago', 'Cleveland', 'Denver', 'Houston', 'Los Angeles', 'Miami', 'New York', 'San Francisco', 'Seattle']

#Splitting the first column 'Date' into year, month, and day
train['year'] = pd.DatetimeIndex(train['Date']).year
train['month'] = pd.DatetimeIndex(train['Date']).month
train['day'] = pd.DatetimeIndex(train['Date']).day

#Checking the shape of the training data
print('Shape of the training data:', train.shape)

#Check the first few records
train.head()

#Dropping the column 'Date'
train.drop('Date', axis=1, inplace=True)

#Change the NaN values
train['Boston'].fillna(train['Boston'].mean(), inplace=True)
train['Chicago'].fillna(train['Chicago'].mean(), inplace=True)
train['Cleveland'].fillna(train['Cleveland'].mean(), inplace=True)
train['Denver'].fillna(train['Denver'].mean(), inplace=True)
train['Houston'].fillna(train['Houston'].mean(), inplace=True)
train['Los Angeles'].fillna(train['Los Angeles'].mean(), inplace=True)
train['Miami'].fillna(train['Miami'].mean(), inplace=True)
train['New York'].fillna(train['New York'].mean(), inplace=True)
train['San Francisco'].fillna(train['San Francisco'].mean(), inplace=True)
train['Seattle'].fillna(train['Seattle'].mean(), inplace=True)

#Splitting cities up into individual datasets
boston_train = train.drop(columns=['Chicago', 'Cleveland', 'Denver', 'Houston', 'Los Angeles', 'Miami', 'New York', 'San Francisco', 'Seattle'])
chicago_train =  train.drop(columns=['Boston', 'Cleveland', 'Denver', 'Houston', 'Los Angeles', 'Miami', 'New York', 'San Francisco', 'Seattle'])
cleveland_train =  train.drop(columns=['Boston', 'Chicago', 'Denver', 'Houston', 'Los Angeles', 'Miami', 'New York', 'San Francisco', 'Seattle'])
denver_train =  train.drop(columns=['Boston', 'Chicago', 'Cleveland', 'Houston', 'Los Angeles', 'Miami', 'New York', 'San Francisco', 'Seattle'])
houston_train =  train.drop(columns=['Boston', 'Chicago', 'Cleveland', 'Denver', 'Los Angeles', 'Miami', 'New York', 'San Francisco', 'Seattle'])
la_train =  train.drop(columns=['Boston', 'Chicago', 'Cleveland', 'Denver', 'Houston', 'Miami', 'New York', 'San Francisco', 'Seattle'])
miami_train =  train.drop(columns=['Boston', 'Chicago', 'Cleveland', 'Denver', 'Houston', 'Los Angeles', 'New York', 'San Francisco', 'Seattle'])
ny_train =  train.drop(columns=['Boston', 'Chicago', 'Cleveland', 'Denver', 'Houston', 'Los Angeles', 'Miami', 'San Francisco', 'Seattle'])
sf_train =  train.drop(columns=['Boston', 'Chicago', 'Cleveland', 'Denver', 'Houston', 'Los Angeles', 'Miami', 'New York', 'Seattle'])
seattle_train =  train.drop(columns=['Boston', 'Chicago', 'Cleveland', 'Denver', 'Houston', 'Los Angeles', 'Miami', 'New York', 'San Francisco'])
boston_train.head()

#Plotting all of the cities gas prices via the given dataset
gas_prices = sns.lineplot(x='year',y='Boston', data=train, color='red')
sns.lineplot(x='year',y='Chicago',data=train,color='blue')
sns.lineplot(x='year',y='Cleveland',data=train,color='green')
sns.lineplot(x='year',y='Denver',data=train,color='orange')
sns.lineplot(x='year',y='Houston',data=train,color='pink')
sns.lineplot(x='year',y='Los Angeles',data=train,color='black')
sns.lineplot(x='year',y='Miami',data=train,color='grey')
sns.lineplot(x='year',y='New York',data=train,color='yellow')
sns.lineplot(x='year',y='San Francisco',data=train,color='teal')
sns.lineplot(x='year',y='Seattle',data=train,color='purple')

gas_prices.set_title('Yearly Gas Prices')
gas_prices.set_ylabel('Gas Prices')
gas_prices.legend(['Boston', 'Chicago', 'Cleveland', 'Denver', 'Houston', 'Los Angeles', 'Miami', 'New York', 'San Francisco', 'Seattle'])

boston_train.size

#Loop through each year for Boston's data and post the margin of error for each year. 2000-2002 do not have data so ignore the first 3 values in array.
years = range(2000, 2021)
bostonMarginOfError = []
chicagoMarginOfError = []
clevelandMarginOfError = []
denverMarginOfError = []
houstonMarginOfError = []
laMarginOfError = []
miamiMarginOfError = []
nyMarginOfError = []
sfMarginOfError = []
seattleMarginOfError = []

for year in years:
  yearBostonPrices = boston_train.query("year =="+str(year))
  bostonErrorMargin = yearBostonPrices['Boston'].sem()*1.96
  bostonMarginOfError.append(bostonErrorMargin)

  yearChicagoPrices = chicago_train.query("year =="+str(year))
  chicagoErrorMargin = yearChicagoPrices['Chicago'].sem()*1.96
  chicagoMarginOfError.append(chicagoErrorMargin)
  
  yearClevelandPrices = cleveland_train.query("year =="+str(year))
  clevelandErrorMargin = yearClevelandPrices['Cleveland'].sem()*1.96
  clevelandMarginOfError.append(clevelandErrorMargin)

  yearDenverPrices = denver_train.query("year =="+str(year))
  denverErrorMargin = yearDenverPrices['Denver'].sem()*1.96
  denverMarginOfError.append(denverErrorMargin)

  yearHoustonPrices = houston_train.query("year =="+str(year))
  houstonErrorMargin = yearHoustonPrices['Houston'].sem()*1.96
  houstonMarginOfError.append(houstonErrorMargin)
  
  yearLaPrices = la_train.query("year =="+str(year))
  laErrorMargin = yearLaPrices['Los Angeles'].sem()*1.96
  laMarginOfError.append(laErrorMargin)

  yearMiamiPrices = miami_train.query("year =="+str(year))
  miamiErrorMargin = yearMiamiPrices['Miami'].sem()*1.96
  miamiMarginOfError.append(miamiErrorMargin)

  yearNyPrices = ny_train.query("year =="+str(year))
  nyErrorMargin = yearNyPrices['New York'].sem()*1.96
  nyMarginOfError.append(nyErrorMargin)
  
  yearSfPrices = sf_train.query("year =="+str(year))
  sfErrorMargin = yearSfPrices['San Francisco'].sem()*1.96
  sfMarginOfError.append(sfErrorMargin)

  yearSeattlePrices = seattle_train.query("year =="+str(year))
  seattleErrorMargin = yearSeattlePrices['Seattle'].sem()*1.96
  seattleMarginOfError.append(seattleErrorMargin)

print(bostonMarginOfError)
print(chicagoMarginOfError)
print(clevelandMarginOfError)
print(denverMarginOfError)
print(houstonMarginOfError)
print(laMarginOfError)
print(miamiMarginOfError)
print(nyMarginOfError)
print(sfMarginOfError)
print(seattleMarginOfError)

#Plotting the margin of error for every year for Boston
plt.plot(years, bostonMarginOfError, 'r-')
plt.xlabel('Years')
plt.ylabel('Margin of Error')
plt.title('Boston')

#Plotting the margin of error for every year for Chicago
plt.plot(years, chicagoMarginOfError, 'g-')
plt.xlabel('Years')
plt.ylabel('Margin of Error')
plt.title('Chicago')

#Plotting the margin of error for every year for Cleveland
plt.plot(years, clevelandMarginOfError, 'b-')
plt.xlabel('Years')
plt.ylabel('Margin of Error')
plt.title('Cleveland')

#Plotting the margin of error for every year for Denver
plt.plot(years, denverMarginOfError, 'y-')
plt.xlabel('Years')
plt.ylabel('Margin of Error')
plt.title('Denver')

#Plotting the margin of error for every year for Houston
plt.plot(years, houstonMarginOfError, 'c-')
plt.xlabel('Years')
plt.ylabel('Margin of Error')
plt.title('Houston')

#Plotting the margin of error for every year for Los Angeles
plt.plot(years, laMarginOfError, 'm-')
plt.xlabel('Years')
plt.ylabel('Margin of Error')
plt.title('Los Angeles')

#Plotting the margin of error for every year for Miami
plt.plot(years, miamiMarginOfError, 'k-')
plt.xlabel('Years')
plt.ylabel('Margin of Error')
plt.title('Miami')

#Plotting the margin of error for every year for San Francisco
fig = plt.figure()
background = fig.add_subplot(1, 1, 1)
background.set_facecolor('xkcd:orange')

plt.plot(years, sfMarginOfError, 'w-')
plt.xlabel('Years')
plt.ylabel('Margin of Error')
plt.title('San Francisco')

#Plotting the margin of error for every year for Seattle
fig = plt.figure()
background = fig.add_subplot(1, 1, 1)
background.set_facecolor('xkcd:black')

plt.plot(years, seattleMarginOfError, 'r-')
plt.xlabel('Years')
plt.ylabel('Margin of Error')
plt.title('Seattle')

#Plotting the margin of error for every year for Seattle
fig = plt.figure()
background = fig.add_subplot(1, 1, 1)
background.set_facecolor('xkcd:grey')

plt.plot(years, bostonMarginOfError, 'r-')
plt.plot(years, chicagoMarginOfError, 'g-')
plt.plot(years, clevelandMarginOfError, 'b-')
plt.plot(years, denverMarginOfError, 'y-')
plt.plot(years, houstonMarginOfError, 'c-')
plt.plot(years, laMarginOfError, 'm-')
plt.plot(years, miamiMarginOfError, 'k-')
plt.plot(years, sfMarginOfError, 'w-')
plt.plot(years, seattleMarginOfError, 'r-')

plt.legend(['Boston', 'Chicago', 'Cleveland', 'Denver', 'Houston', 'Los Angeles', 'Miami', 'New York', 'San Francisco', 'Seattle'])
plt.xlabel('Years')
plt.ylabel('Margin of Error')
plt.title('Every City MoE')

#Using iloc to single out the data
bostonx=boston_train.iloc[:,1:4]
bostony=boston_train.iloc[:,0:1]
chicagox=chicago_train.iloc[:,1:4]
chicagoy=chicago_train.iloc[:,0:1]
clevelandx=cleveland_train.iloc[:,1:4]
clevelandy=cleveland_train.iloc[:,0:1]
denverx=denver_train.iloc[:,1:4]
denvery=denver_train.iloc[:,0:1]
houstonx=houston_train.iloc[:,1:4]
houstony=houston_train.iloc[:,0:1]
lax=la_train.iloc[:,1:4]
lay=la_train.iloc[:,0:1]
miamix=miami_train.iloc[:,1:4]
miamiy=miami_train.iloc[:,0:1]
nyx=ny_train.iloc[:,1:4]
nyy=ny_train.iloc[:,0:1]
sfx=sf_train.iloc[:,1:4]
sfy=sf_train.iloc[:,0:1]
seattlex=seattle_train.iloc[:,1:4]
seattley=seattle_train.iloc[:,0:1]

#Train test splitting the data for every cities data. 30% test 70% training
boston_x_train, boston_x_test, boston_y_train, boston_y_test = train_test_split(
    bostonx,
    bostony,
    test_size= .3,
    random_state=0
)
chicago_x_train, chicago_x_test, chicago_y_train, chicago_y_test = train_test_split(
    chicagox,
    chicagoy,
    test_size= .3,
    random_state=0
)
cleveland_x_train, cleveland_x_test, cleveland_y_train, cleveland_y_test = train_test_split(
    clevelandx,
    clevelandy,
    test_size= .3,
    random_state=0
)
denver_x_train, denver_x_test, denver_y_train, denver_y_test = train_test_split(
    denverx,
    denvery,
    test_size= .3,
    random_state=0
)
houston_x_train, houston_x_test, houston_y_train, houston_y_test = train_test_split(
    houstonx,
    houstony,
    test_size= .3,
    random_state=0
)
la_x_train, la_x_test, la_y_train, la_y_test = train_test_split(
    lax,
    lay,
    test_size= .3,
    random_state=0
)
miami_x_train, miami_x_test, miami_y_train, miami_y_test = train_test_split(
    miamix,
    miamiy,
    test_size= .3,
    random_state=0
)
ny_x_train, ny_x_test, ny_y_train, ny_y_test = train_test_split(
    nyx,
    nyy,
    test_size= .3,
    random_state=0
)
sf_x_train, sf_x_test, sf_y_train, sf_y_test = train_test_split(
    sfx,
    sfy,
    test_size= .3,
    random_state=0
)
seattle_x_train, seattle_x_test, seattle_y_train, seattle_y_test = train_test_split(
    seattlex,
    seattley,
    test_size= .3,
    random_state=0
)

#Using DTR to fit, predict, and determine the accuracy of the data
boston_dtr = DecisionTreeRegressor()
boston_dtr.fit(boston_x_train, boston_y_train)
chicago_dtr = DecisionTreeRegressor()
chicago_dtr.fit(chicago_x_train, chicago_y_train)
cleveland_dtr = DecisionTreeRegressor()
cleveland_dtr.fit(cleveland_x_train, cleveland_y_train)
denver_dtr = DecisionTreeRegressor()
denver_dtr.fit(denver_x_train, denver_y_train)
houston_dtr = DecisionTreeRegressor()
houston_dtr.fit(houston_x_train, houston_y_train)
la_dtr = DecisionTreeRegressor()
la_dtr.fit(la_x_train, la_y_train)
miami_dtr = DecisionTreeRegressor()
miami_dtr.fit(miami_x_train, miami_y_train)
ny_dtr = DecisionTreeRegressor()
ny_dtr.fit(ny_x_train, ny_y_train)
sf_dtr = DecisionTreeRegressor()
sf_dtr.fit(sf_x_train, sf_y_train)
seattle_dtr = DecisionTreeRegressor()
seattle_dtr.fit(seattle_x_train, seattle_y_train)
y_pred = boston_dtr.predict(boston_x_test)
accuracy = r2_score(boston_y_test, y_pred)

#Checking the accuracy of the prediction for Boston gas prices only
print(accuracy)

#Predicting the gas price for any date even in the future/past
print("Enter the year you you want to predict gas in:")
y = input()
print("Enter the month you you want to predict gas in:")
m = input()
d = 1

predict_price_boston = boston_dtr.predict([[y,m,d]])
predict_price_chicago = chicago_dtr.predict([[y,m,d]])
predict_price_cleveland = cleveland_dtr.predict([[y,m,d]])
predict_price_denver = denver_dtr.predict([[y,m,d]])
predict_price_houston = houston_dtr.predict([[y,m,d]])
predict_price_la = la_dtr.predict([[y,m,d]])
predict_price_miami = miami_dtr.predict([[y,m,d]])
predict_price_ny = ny_dtr.predict([[y,m,d]])
predict_price_sf = sf_dtr.predict([[y,m,d]])
predict_price_seattle = seattle_dtr.predict([[y,m,d]])

print("Price of gas in Boston on the 1st: ", predict_price_boston)
print("Price of gas in Chicago on the 1st: ", predict_price_chicago)
print("Price of gas in Cleveland on the 1st: ", predict_price_cleveland)
print("Price of gas in Denver on the 1st: ", predict_price_denver)
print("Price of gas in Houston on the 1st: ", predict_price_houston)
print("Price of gas in Los Angeles on the 1st: ", predict_price_la)
print("Price of gas in Miami on the 1st: ", predict_price_miami)
print("Price of gas in New York on the 1st: ", predict_price_ny)
print("Price of gas in San Fransico on the 1st: ", predict_price_sf)
print("Price of gas in Seattle on the 1st: ", predict_price_seattle)